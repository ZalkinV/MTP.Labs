kernel void firstImpl(
	global const float* firstMatrix,
	global const float* secondMatrix,
	const int rowsCount,
	const int colsRowsCount,
	const int colsCount,
	global float* matrixResult)
{
	const int iRow = get_global_id(0);
	const int iCol = get_global_id(1);


	float elValue = 0;
	for (int iEl = 0; iEl < colsRowsCount; iEl++)
	{
		elValue += firstMatrix[iRow * colsRowsCount + iEl] * secondMatrix[iEl * colsCount + iCol];
	}

	matrixResult[iRow * colsCount + iCol] = elValue;
}

kernel void secondImpl(
	global const float* firstMatrix,
	global const float* secondMatrix,
	const int rowsCount,
	const int colsRowsCount,
	const int colsCount,
	global float* resultMatrix)
{
	const int globalRowsCount = get_global_size(0);
	const int globalColsCount = get_global_size(1);

	const int iRow = get_global_id(0);
	const int iCol = get_global_id(1);

	const int iGroupRow = get_group_id(0);
	const int iGroupCol = get_group_id(1);

	const int iRowLoc = get_local_id(0);
	const int iColLoc = get_local_id(1);

	local float fMatGroup[LOCAL_GROUP_SIZE][LOCAL_GROUP_SIZE];
	local float sMatGroup[LOCAL_GROUP_SIZE][LOCAL_GROUP_SIZE];

	const int fsSubMatCount = (int)ceil(colsRowsCount / (float)LOCAL_GROUP_SIZE);
	for (int iSubMat = 0; iSubMat < fsSubMatCount; iSubMat++)
	{
		const int fMatRow = iGroupRow * LOCAL_GROUP_SIZE + iRowLoc;
		const int fMatCol = iSubMat * LOCAL_GROUP_SIZE + iColLoc;
		if (fMatRow < rowsCount && fMatCol < colsRowsCount)
			fMatGroup[iRowLoc][iColLoc] = firstMatrix[fMatRow * colsRowsCount + fMatCol];
		else
			fMatGroup[iRowLoc][iColLoc] = 0;

		const int sMatRow = iSubMat * LOCAL_GROUP_SIZE + iRowLoc;
		const int sMatCol = iGroupCol * LOCAL_GROUP_SIZE + iColLoc;
		if (sMatRow < colsRowsCount && sMatCol < colsCount)
			sMatGroup[iRowLoc][iColLoc] = secondMatrix[sMatRow * colsCount + sMatCol];
		else
			sMatGroup[iRowLoc][iColLoc] = 0;


		float elValue = 0;
		for (int iEl = 0; iEl < LOCAL_GROUP_SIZE; iEl++)
		{
			elValue += fMatGroup[iRowLoc][iEl] * sMatGroup[iEl][iColLoc];
		}

		if (iRow < rowsCount && iCol < colsCount)
			resultMatrix[iRow * colsCount + iCol] += elValue;
	}
}
