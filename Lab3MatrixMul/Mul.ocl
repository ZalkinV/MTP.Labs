kernel void firstImpl(
	global const float* firstMatrix,
	global const float* secondMatrix,
	int colsRowsCount,
	global float* matrixResult)
{
	int colsCount = get_global_size(1);
	
	int iRow = get_global_id(0);
	int iCol = get_global_id(1);


	float elValue = 0;
	for (int iEl = 0; iEl < colsRowsCount; iEl++)
	{
		elValue += firstMatrix[iRow * colsRowsCount + iEl] * secondMatrix[iEl * colsCount + iCol];
	}

	matrixResult[iRow * colsCount + iCol] = elValue;
}

#define LOCAL_GROUP_SIZE 2
kernel void secondImpl(
	global const float* firstMatrix,
	global const float* secondMatrix,
	int colsRowsCount,
	global float* resultMatrix)
{
	int colsCount = get_global_size(1);

	int iRow = get_global_id(0);
	int iCol = get_global_id(1);

	int iGroupRow = get_group_id(0);
	int iGroupCol = get_group_id(1);

	int iRowLoc = get_local_id(0);
	int iColLoc = get_local_id(1);

	local float fMatGroup[LOCAL_GROUP_SIZE][LOCAL_GROUP_SIZE];
	local float sMatGroup[LOCAL_GROUP_SIZE][LOCAL_GROUP_SIZE];


	int fsSubMatCount = (int)ceil(colsRowsCount / (float)LOCAL_GROUP_SIZE);
	for (int iSubMat = 0; iSubMat < fsSubMatCount; iSubMat++)
	{
		int fMatIndex = iGroupRow * colsRowsCount * LOCAL_GROUP_SIZE +	// skip previous groups rows
						iSubMat * LOCAL_GROUP_SIZE +					// go inside row of current local group
						iRowLoc * colsRowsCount +						// skip previous rows inside group
						iColLoc;										// go inside local group for current element
		
		int sMatIndex = iGroupCol * LOCAL_GROUP_SIZE +					// skip previous groups cols
						iSubMat * colsCount * LOCAL_GROUP_SIZE +		// go inside column of current local group
						iRowLoc * colsCount +							// skip previous rows inside group
						iColLoc;										// go inside local group for current element

		fMatGroup[iRowLoc][iColLoc] = firstMatrix[fMatIndex];
		sMatGroup[iRowLoc][iColLoc] = secondMatrix[sMatIndex];

		for (int iEl = 0; iEl < LOCAL_GROUP_SIZE; iEl++)
		{
			resultMatrix[iRow * colsCount + iCol] += fMatGroup[iRowLoc][iEl] * sMatGroup[iEl][iColLoc];
		}
	}
}
