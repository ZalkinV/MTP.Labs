kernel void firstImpl(
	global const float* firstMatrix,
	global const float* secondMatrix,
	int colsRowsCount,
	global float* matrixResult)
{
	int colsCount = get_global_size(1);
	
	int iRow = get_global_id(0);
	int iCol = get_global_id(1);


	float elValue = 0;
	for (int iEl = 0; iEl < colsRowsCount; iEl++)
	{
		elValue += firstMatrix[iRow * colsRowsCount + iEl] * secondMatrix[iEl * colsCount + iCol];
	}

	matrixResult[iRow * colsCount + iCol] = elValue;
}

#define LOCAL_GROUP_SIZE 2
kernel void secondImpl(
	global const float* firstMatrix,
	global const float* secondMatrix,
	int colsRowsCount,
	global float* matrixResult)
{
	int colsCount = get_global_size(1);

	int iRow = get_global_id(0);
	int iCol = get_global_id(1);

	int iGroupRow = get_group_id(0);
	int iGroupCol = get_group_id(1);

	int iRowLoc = get_local_id(0);
	int iColLoc = get_local_id(1);

	local float fMatLoc[LOCAL_GROUP_SIZE][LOCAL_GROUP_SIZE];
	local float sMatLoc[LOCAL_GROUP_SIZE][LOCAL_GROUP_SIZE];


	float elValue = 0;
	for (int iEl = 0; iEl < colsRowsCount; iEl++)
	{
		elValue += firstMatrix[iRow * colsRowsCount + iEl] * secondMatrix[iEl * colsCount + iCol];
	}

	matrixResult[iRow * colsCount + iCol] = iGroupRow * 10 + iGroupCol;
}
